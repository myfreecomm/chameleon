@use '../../foundation/depth' as depth;
@use '../../foundation/borders' as borders;
@use '../../foundation/colors' as colors;
@use '../../foundation/spaces' as spaces;
@use '../../foundation/utils' as utils;
@use '../icon' as icon;

.ch-checkbox,
.ch-radio {
  // 1. Base

  position: relative;
  display: inline-block;

  // 2. Checkbox

  > input[type="checkbox"],
  > input[type="radio"],
  > input[type="checkbox"] + label:before,
  > input[type="radio"] + label:before,
  > input[type="checkbox"] + label:after,
  > input[type="radio"] + label:after {
    position: absolute;
    top: 0;
    left: 0;
    display: inline-block;
    width: icon.get-icon-size(m);
    height: icon.get-icon-size(m);
  }

  > input[type="checkbox"],
  > input[type="radio"] {
    z-index: depth.get-z-index(1);

    opacity: 0;
    cursor: pointer;

    + label:before,
    + label:after {
      content: '';
    }

    // 2.1. Wrapper

    + label:before {
      @include borders.border;

      border-radius: borders.get-border-radius(1);
      background-color: colors.get-color(neutral, 1);
    }

    // 2.1.1. Focus interaction

    &:hover:focus + label:before,
    &:hover + label:before,
    &:focus + label:before {
      border-color: colors.get-color(primary, focus);
    }

    // 2.1.1. Active interaction

    &:active + label:before {
      border-color: colors.get-color(primary, active);
    }

    // 2.2. Tick

    & + label:after {
      $offset: calc(#{borders.get-border-radius(1)} + 1px);
      $size: calc(#{icon.get-icon-size(m)} - 2 * #{$offset});

      top: $offset;
      left: $offset;

      width: $size;
      height: $size;
    }
    
    &:checked + label:after {
      background: colors.get-color(primary);
    }
  }

  // 3. Label

  > input[type="checkbox"] + label,
  > input[type="radio"] + label {
    display: inline-block;

    padding-left: calc(#{icon.get-icon-size(m)} + #{spaces.get-space(s)});

    &:empty {
      padding: 0;
      width: icon.get-icon-size(m);
      height: 0;
    }
  }

  // 4. Disabled and readonly states

  > input {
    &:disabled,
    &.is-disabled {
      & + label,
      & + label:before,
      & + label:after {
        @include utils.disabled;
      }
    }
  }

  > input {
    &:disabled,
    &.is-disabled,
    &[readonly] {
      &,
      & + label,
      & + label:before,
      & + label:after {
        pointer-events: none;
      }

      + label:before {
        background: colors.get-color(neutral, 2);
      }
    }
  }

  @at-root {
    .is-disabled .ch-checkbox > input + label,
    .is-disabled .ch-radio > input + label {
      &:before {
        background: colors.get-color(neutral, 2);
      }

      &,
      &:before,
      &:after {
        opacity: 1;
      }
    }
  }

  // 5. Negative variation

  &--negative {
    color: colors.get-color(negative);

    > input[type="checkbox"],
    > input[type="radio"] {
      + label:before {
        border-color: colors.get-color(negative);
      }

      &:checked + label:after {
        background: colors.get-color(negative);
      }

      &:hover:focus + label:before,
      &:hover + label:before,
      &:focus + label:before {
        border-color: colors.get-color(negative, focus);
      }

      &:active + label:before {
        border-color: colors.get-color(negative, active);
      }
    }
  }

  // 6. Radio

  @at-root .ch-radio > input[type="radio"] {
    + label:before,
    &:checked + label:after {
      border-radius: borders.get-border-radius(circle);
    }
  }
}
