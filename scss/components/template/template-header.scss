@use '../../foundation/borders' as borders;
@use '../../foundation/breakpoints' as breakpoints;
@use '../../foundation/colors' as colors;
@use '../../foundation/depth' as depth;
@use '../../foundation/motion' as motion;
@use '../../foundation/sizes' as sizes;
@use '../../foundation/spaces' as spaces;
@use '../../foundation/thypography' as thypography;
@use '../../foundation/utils' as utils;
@use '../icon' as icon;

.ch-template-header {
  $button-box-height: utils.calc-box-height(thypography.get-font-size(2), spaces.get-space(xs), spaces.get-space(xs));
  $icon-button-width: calc(#{$button-box-height} + 2 * #{borders.$border-width});
  $nav-max-width: calc(3 * #{$icon-button-width} + 2 * #{spaces.get-space(xxs)});

  // 1. Base
  @include motion.transition(unquote('box-shadow, margin-left, transform'));

  display: flex;
  align-items: center;
  justify-content: space-between;

  height: sizes.get-size(1);
  padding-right: spaces.get-space(l);
  padding-left: spaces.get-space(l);
  background: colors.get-color(neutral, 1);

  &,
  > * {
    position: relative;
  }

  // 2. Secondary

  > *:not(.ch-template-header-nav) {
    @include breakpoints.media(from, desktop) {
      max-width: 50%;
    }

    order: 1;

    max-width: calc(100% - #{$nav-max-width});
    padding-right: spaces.get-space(s);

    // 2.1. Breadcrumbs item

    .ch-breadcrumbs-item:last-child {
      @include thypography.truncate;
    }
  }

  // 3. Nav

  > .ch-template-header-nav {
    @include breakpoints.media(from, desktop) {
      max-width: 50%;

      > .ch-template-header-nav-toggle {
        display: none;
      }
    }

    @include spaces.inline-group(left, xxs);

    order: 2;
    flex-wrap: nowrap;
    align-items: center;

    overflow-x: initial;
    max-width: $nav-max-width;
    margin-left: auto;

    > .ch-template-header-nav-toggle {
      @include icon.icon-only(xs);

      width: $icon-button-width;
      height: $icon-button-width;

      > .ch-icon {
        @include icon.mask-icon(icon.$icon-angle-double-left);

        height: icon.get-icon-size(m);
        background-color: colors.get-color(text, 2);
      }

      &:hover:focus,
      &:hover,
      &:focus,
      &:active {
        > .ch-icon {
          background-color: colors.get-color(text, 1);
        }
      }
    }

    &:not(.is-expanded) {
      @include breakpoints.media(to, tablet) {
        > .ch-button--icon:nth-child(n+4),
        > *:not(.ch-button--icon):not(.ch-template-header-nav-toggle) {
          display: none;
        }
      }
    }

    // 3.2. Expanded state

    &.is-expanded {
      @include breakpoints.media(to, tablet) {
        overflow-x: auto;
        max-width: 100%;
        margin-left: calc(#{$icon-button-width} + #{spaces.get-space(xxs)});

        > .ch-template-header-nav-toggle {
          position: fixed;
          margin-left: calc(-1 * (#{$icon-button-width} + #{spaces.get-space(xxs)}));

          > .ch-icon {
            @include icon.mask-icon(icon.$icon-angle-double-right, 'only-mask');
          }
        }

        + * {
          display: none;
        }
      }
    }
  }

  // 3.3. Sticky state

  &.is-sticky {
    @include depth.shadow(2, top-bottom);

    position: sticky;
    top: 0;
    z-index: depth.get-z-index(2);
  }

  // 3.4. Hidden state

  &.is-hidden {
    @include breakpoints.media(to, mobile) {
      transform: translateY(-100%);
    }
  }
}
