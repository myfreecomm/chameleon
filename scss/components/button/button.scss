@use '../../foundation/borders' as borders;
@use '../../foundation/colors' as colors;
@use '../../foundation/spaces' as spaces;
@use '../../foundation/thypography' as thypography;
@use '../../foundation/utils' as utils;

.ch-button {

  // 1. Base

  $inset-type: squish;
  $size: s;
  $border-rule: box;
  $border-color: colors.get-color(default);

  // @todo @include ch-ripple-effect(ch-get-color(neutral, 1));
  @include spaces.inset($inset-type, $size);
  @include borders.border($border-rule, $border-color);
  @include borders.border-radius(1);

  display: inline-block;

  cursor: pointer;
  white-space: nowrap;
  font-weight: thypography.get-font-weight(semibold);
  text-align: center;
  background-color: colors.get-color(default);

  &,
  &:hover:focus,
  &:hover,
  &:focus,
  &:active {
    color: colors.get-color(text, 1, inverse);
  }

  // 1.1. Focus interaction

  &:hover:focus,
  &:hover,
  &:focus {
    border-color: colors.get-color(default, focus);
    background-color: colors.get-color(default, focus);
  }

  // 1.2. Active interaction

  &:active {
    border-color: colors.get-color(default, active);
    background-color: colors.get-color(default, active);
  }

  // 1.3. Disabled interaction

  &:disabled,
  &.is-disabled {
    @include utils.disabled;

    &:after {
      display: none;
    }
  }

  // 2. Color variations

  @each $type in (brand, primary, negative) {
    &--#{$type} {
      border-color: colors.get-color($type);
      background-color: colors.get-color($type);

      // 2.1. Focus interaction

      &:hover:focus,
      &:hover,
      &:focus {
        border-color: colors.get-color($type, focus);
        background-color: colors.get-color($type, focus);
      }

      // 2.2. Active interaction

      &:active {
        border-color: colors.get-color($type, acitve);
        background-color: colors.get-color($type, active);
      }
    }
  }

  // 3. Outline and ghost variation

  &--outline,
  &--ghost {
    color: colors.get-color(text, 2);

    // 3.1. Focus and active interaction

    &:hover:focus,
    &:hover,
    &:focus,
    &:active {
      color: colors.get-color(text, 1);
    }

    &,
    &:hover:focus,
    &:hover,
    &:focus,
    &:active {
      background: transparent;
    }

    // 3.2. Ripple effect

    &:after {
      background: colors.get-color(default);
    }

    // 3.3. Color variations

    @each $type in (brand, primary, negative) {
      @at-root &.ch-button--#{$type} {
        color: colors.get-color($type);

        // 3.3.1. Focus interaction

        &:hover:active,
        &:hover,
        &:focus {
          color: colors.get-color($type, focus);
        }

        // 3.3.2. Active interaction

        &:active {
          color: colors.get-color($type, active);
        }

        // 3.3.3. Ripple effect

        &:after {
          background: colors.get-color($type);
        }
      }
    }
  }

  // 4. Outline variation

  &--outline {
    border-color: colors.get-color(default);

    // 4.1. Focus interaction

    &:hover:active,
    &:hover,
    &:focus {
      border-color: colors.get-color(default, focus);
    }

    // 4.2. Active interaction

    &:active {
      border-color: colors.get-color(default, active);
    }

    // 4.3. Color variations

    @each $type in (brand, primary, negative) {
      @at-root &.ch-button--#{$type} {
        border-color: colors.get-color($type);

        // 4.3.1. Focus interaction

        &:hover:active,
        &:hover,
        &:focus {
          border-color: colors.get-color($type, focus);
        }

        // 4.3.2. Active interaction

        &:active {
          border-color: colors.get-color($type, active);
        }
      }
    }
  }

  // 5. Ghost variation

  &--ghost {
    &,
    &:hover:focus,
    &:hover,
    &:focus,
    &:active {
      border-color: transparent;
    }

    // 5.1. Color variations

    @each $type in (brand, primary, negative) {
      @at-root &.ch-button--#{$type} {
        color: colors.get-color($type);

        // 5.1.1. Focus interaction

        &:focus:hover,
        &:focus,
        &:hover {
          color: colors.get-color($type, focus);
        }

        // 5.1.2. Active interaction

        &:active {
          color: colors.get-color($type, active);
        }
      }
    }
  }

  // 6. Small variation

  &--small {
    @include spaces.inset(squish, xs);

    &.has-leadingIcon,
    &.has-trailingIcon {
      > .ch-icon {
        // @todo font-size: #{ch-get-icon-size(s)};
      }
    }
  }

  // // 7. Icon variation

  &--icon,
  &.has-leadingIcon,
  &.has-trailingIcon {
    > .ch-icon:first-child,
    > .ch-icon:last-child {
      // @todo font-size: #{ch-get-icon-size(s)};
    }
  }

  &--icon.ch-button--small,
  &.has-leadingIcon.ch-button--small,
  &.has-trailingIcon.ch-button--small {
    > .ch-icon:first-child,
    > .ch-icon:last-child {
      // @todo font-size: #{ch-get-icon-size(xs)};
    }
  }

  &--icon:not(.ch-button--small) {
    // @todo @include ch-icon-only(xs);
  }

  &--icon.ch-button--small {
    // @todo @include ch-icon-only(xxs);
  }

  // 8. Mock Label

  &--mockLabel {
    // @todo margin-top: #{ch-get-mock-text-size()};
  }
}
