@use '../../foundation/borders' as borders;
// @use '../../foundation/breakpoints' as breakpoints;
@use '../../foundation/colors' as colors;
// @use '../../foundation/sizes' as sizes;
// @use '../../foundation/spaces' as spaces;
// @use '../../foundation/thypography' as thypography;
// @use '../../foundation/utils' as utils;
@use '../icon' as icon;
@use 'mixins' as *;

.ch-spinner {
  $size: icon.get-icon-size(m);

  // 1. Base

  position: relative;
  display: inline-block;
  background-color: transparent;
  width: $size;
  height: $size;
  line-height: $size;
  vertical-align: middle;

  // 2. Size Variations

  @each $size in icon.$sizes {
    &--#{$size} {
      $size: icon.get-icon-size($size);

      width: $size;
      height: $size;
      line-height: $size;
    }
  }

  &:before,
  &:after {
    @include borders.border-radius(circle);

    content: '';
    position: absolute;
    display: inline-block;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  &:before {
    @include borders.border(box, colors.get-color(default), solid, 3px);
    opacity: 0.3;
  }

  &:after {
    @include borders.border(box, transparent, solid, 3px);
    @include borders.border(top, colors.get-color(default), solid, 3px);
    @include spin-effect; // @todo review
  }

  // 3. Color Variations

  @each $type in (brand, primary, positive, warning, negative) {
    &--#{$type} {
      &:before {
        @include borders.border(box, colors.get-color($type), solid, 3px);
        opacity: 0.3;
      }

      &:after {
        @include borders.border(top, colors.get-color($type), solid, 3px);
      }
    }
  }

  // 4. Inverse Variation

  &--inverse {
    &:before {
      @include borders.border(box, colors.get-color(neutral, 1), solid, 3px);
      opacity: 0.3;
    }

    &:after {
      @include borders.border(top, colors.get-color(neutral, 1), solid, 3px);
    }
  }
}
