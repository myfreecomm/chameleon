@use '../../foundation/breakpoints' as breakpoints;
@use '../../foundation/borders' as borders;
@use '../../foundation/colors' as colors;
@use '../../foundation/depth' as depth;
@use '../../foundation/helpers' as helpers;
@use '../../foundation/spaces' as spaces;
@use '../../foundation/thypography' as thypography;
@use '../icon' as icon;
@use '../input' as input;

.ch-select {
  $box-height: helpers.calc-box-height(
    thypography.get-font-size(2),
    spaces.get-space(xs),
    spaces.get-space(xs)
  );

  // 1. Base

  position: relative;
  display: inline-block;

  &.ch-dropdown {
    vertical-align: middle;
  }

  // 2. Toggle

  &:not(.ch-dropdown),
  & > .ch-dropdown-toggle {
    @include input.wrapper;
  }

  &:not(.is-readonly) > .ch-dropdown-toggle,
  &:not(.ch-dropdown):not([readonly]):not(.is-readonly):not([multiple]) {
    $icon-right: calc(#{$box-height} / 2 - #{icon.get-icon-size(m)} / 2);

    padding-right: $box-height;
    background-image: url('#{icon.$icon-angle-down}');
    background-repeat: no-repeat;
    background-position: right #{$icon-right} center;
    background-size: #{icon.get-icon-size(m)} #{icon.get-icon-size(m)};

    &.has-clear {
      padding-right: calc(#{$box-height} + #{icon.get-icon-size(m)});
    }
  }

  > .ch-dropdown-toggle {
    @include helpers.truncate;

    min-height: calc(#{$box-height} + 2 * #{borders.$border-width});

    &.has-options {
      display: flex;
      flex-wrap: wrap;
      align-items: center;

      padding-bottom: 0;

      > .ch-tag {
        z-index: depth.get-z-index(1);

        color: colors.get-color(text, 1);
        margin-right: spaces.get-space(xs);
        margin-bottom: spaces.get-space(xs);
        text-transform: initial;
        box-shadow: 0 0 0 #{borders.$border-width} #{colors.get-color(border)};
      }
    }
  }

  > .ch-overlay.is-visible + .ch-dropdown-toggle {
    border-color: colors.get-color(primary, focus);
  }

  // 3. Clear

  .ch-select-clear {
    @include icon.mask-icon(icon.$icon-times);

    display: block;
    position: absolute;
    top: 50%;
    right: $box-height;
    transform: translateY(-50%);

    cursor: pointer;
    width: icon.get-icon-size(m);
    height: icon.get-icon-size(m);
    mask-size: calc(#{icon.get-icon-size(m)} / 2);
    background-color: colors.get-color(text, 2);
    border: 0;

    &:hover:focus,
    &:hover,
    &:focus,
    &:active {
      background-color: colors.get-color(text, 1);
    }
  }

  // 4. Options

  > .ch-overlay {
    @include breakpoints.media(from, desktop) {
      z-index: depth.get-z-index(1, 99);

      width: 100%;
    }

    > .ch-card {
      @include spaces.paddingless;
      @include breakpoints.media(from, desktop) {
        max-height: 50vh;
      }

      display: flex;
      flex-direction: column;
      flex-wrap: nowrap;

      > .ch-card-content {
        @include spaces.paddingless;

        flex: 1;
        overflow-y: auto;
      }

      > .ch-card-header,
      > .ch-card-footer {
        @include breakpoints.media(to, tablet) {
          @include spaces.inset();
        }

        @include breakpoints.media(from, desktop) {
          @include spaces.inset(default, s);
        }
      }

      > .ch-card-header,
      > .ch-card-content,
      > .ch-card-footer {
        margin-bottom: 0;
      }

      > .ch-card-footer {
        @include breakpoints.media(from, desktop) {
          display: none;
        }
      }

      > .ch-card-header > .ch-search,
      > .ch-card-footer > .ch-button {
        @include helpers.fluid;

        display: block;
      }

      .ch-menu-item,
      .ch-menu-group > .ch-title {
        @include breakpoints.media(from, desktop) {
          @include spaces.inset(squish, s);
        }
      }

      .ch-menu-item {
        font-weight: thypography.get-font-weight();

        &:before {
          content: none;
        }

        .ch-highlight:after {
          content: none;
        }

        &.is-active {
          color: colors.get-color(text, inverse, 2);
          background: colors.get-color(primary);

          &:hover:focus,
          &:hover,
          &:focus,
          &:active {
            background: colors.get-color(primary, focus);
          }

        }
      }

      .ch-menu-group .ch-menu-item {
        @include breakpoints.media(from, desktop) {
          padding-left: spaces.get-space(l);
        }
      }
    }
  }

  &--multiple .ch-menu-item.is-active {
    @include breakpoints.media(from, desktop) {
      display: none
    }
  }

  // 5. Blankslate

  .ch-blankslate-content {
    @include helpers.fluid;
    @include spaces.inset;
  }

  .ch-card-header + .ch-card-content .ch-blankslate-content {
    padding-top: 0;
  }

  // 6. Disabled and readonly state

  &:not(.ch-dropdown)[readonly],
  &:not(.ch-dropdown).is-readonly,
  &.is-readonly > .ch-dropdown-toggle,
  &:not(.ch-dropdown)[disabled],
  &:not(.ch-dropdown).is-disabled,
  &.is-disabled > .ch-dropdown-toggle {
    background-color: colors.get-color(neutral, 2);
  }

  @at-root *.is-disabled {
    .ch-select:not(.ch-dropdown),
    .ch-select.ch-dropdown > .ch-dropdown-toggle {
      background-color: colors.get-color(neutral, 2);
    }
  }

  // 7. Readonly state

  &:not(.ch-dropdown)[readonly],
  &:not(.ch-dropdown).is-readonly,
  &.is-readonly > .ch-dropdown-toggle {
    pointer-events: none;
  }

  &.is-readonly > .ch-dropdown-toggle {
    &.has-options {
      padding-right: calc(#{spaces.get-space(s)} - #{spaces.get-space(xs)});
    }

    .ch-tag-close,
    .ch-select-clear {
      display: none;
    }

    .ch-tag {
      padding-right: spaces.get-space(xs);
    }
  }

  // 8. Support variations

  @each $type in (info, warning, negative, positive) {
    &--#{$type} {
      &:not(.ch-dropdown),
      > .ch-dropdown-toggle {
        border-color: colors.get-color($type);
      }

      &:not(.ch-dropdown) {
        &:hover:focus,
        &:hover,
        &:focus {
          border-color: colors.get-color($type, focus);
        }

        &:active {
          border-color: colors.get-color($type, active);
        }
      }

      > .ch-overlay.is-visible + .ch-dropdown-toggle {
        border-color: colors.get-color($type, focus);
      }
    }
  }

  // 9. Multiple variation

  &:not(.ch-dropdown)[multiple] {
    @include spaces.paddingless;

    background-image: none;

    > option {
      @include spaces.inset(squish, s);
    }
  }

  // 10. Small variation

  &--small:not(.ch-dropdown),
  &--small:not(.ch-dropdown)[multiple] > option,
  &--small > .ch-dropdown-toggle {
    @include spaces.inset(squish, xs);
  }

  &--small > .ch-dropdown-toggle {
    $box-height: helpers.calc-box-height(
      thypography.get-font-size(2),
      spaces.get-space(xxs),
      spaces.get-space(xxs)
    );

    @include spaces.inset(squish, xs);

    min-height: calc(#{$box-height} + 2 * #{borders.$border-width});
    
    &:not(.is-readonly),
    &:not([readonly]) {
      $icon-right: calc(#{$box-height} / 2 - #{icon.get-icon-size(m)} / 2);

      padding-right: $box-height;
      background-position: right #{$icon-right} center;

      &.has-clear {
        padding-right: calc(#{$box-height} + #{icon.get-icon-size(m)});
      }
    }

    .ch-select-clear {
      right: $box-height;
    }
  }

  &--small > .ch-dropdown-toggle.has-options > .ch-tag {
    margin-bottom: spaces.get-space(xxs);
  }
}
